# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = 	[%GPLMT_SLAVES]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = %GPLMT_SLAVE_PORT

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes import pb
c['change_source'] = pb.PBChangeSource(port=9999, user='<CHANGE>', passwd='<CHANGE>')

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.steps import source, shell
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=[%GPLMT_SCHEDULER_BUILDERS]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=[%GPLMT_SCHEDULER_BUILDERS]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand

tmp = "/tmp/gnbuild"

f = BuildFactory()
# check out the source
f.addStep(source.SVN(mode='update', svnurl = "https://gnunet.org/svn/gnunet/"))
f.addStep(shell.ShellCommand(command=["sh", "-c", "killall gnunet-service-arm || true; svn -R revert *; rm -rf /tmp/*; rm -rf $HOME/gnbuild;"],
	description="clean up from previous runs",
	name="killall",
	haltOnFailure=False,
	timeout=30))
f.addStep(shell.ShellCommand(command=["sh", "-c", "libtoolize; ./bootstrap"],
	description="bootstrap",
	name="bootstrap",
	haltOnFailure=True))
f.addStep(shell.Configure(command=["sh", "-c", "export LD_LIBRARY_PATH=/usr/local/lib; ./configure --prefix=$HOME/gnbuild --with-extractor=/usr/local  --with-curl=/usr/local --with-mysql=/usr/lib/mysql --enable-logging=verbose"],
	description="configure",
	name="configure",
	haltOnFailure=True))
f.addStep(shell.Compile(description="make all",
						name="make all",
						command=["sh", "-c", "make all"]))
f.addStep(shell.ShellCommand(description="make install",
						name="make install",
						command=["sh", "-c", "make install"]))
f.addStep(shell.ShellCommand(description="start GNUnet",
						name="start GNUnet",
						timeout=None,
						env={'GNUNET_PREFIX': "/home/tumple_gnunet/gnbuild", 'PATH': ["/home/tumple_gnunet/gnbuild/bin","${PATH}"]},
						command=["sh", "-c", "gnunet-arm -s -d"]))


from buildbot.config import BuilderConfig

%GPLMT_BUILDER_DEFINITION

c['builders'] = [%GPLMT_BUILDER_SUMMARY]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    %GPLMT_FORCE_ENABLE auth=auth.BasicAuth([("%GPLMT_FORCE_USER","%GPLMT_FORCE_PWD")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=%GPLMT_WEB_PORT, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "GNUnet"
c['titleURL'] = "https://gnunet.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:%GPLMT_WEB_PORT/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
