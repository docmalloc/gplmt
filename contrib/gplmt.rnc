start = experiment

experiment = element experiment {
  element description { text }?,

  \include*,

  element targets { target* },

  element tasklists { tasklist* },

  element steps { step* }
}

# Expandable paths contain
# variables that will be expanded.
expandable_path = text

\include = element include {
  attribute file { expandable_path },
  attribute prefix { text}
}

target = element target {
  attribute name { text },
  ((export-env*) & (target-ssh | target-local | target-planetlab | target-group))
}

export-env = element export-env {
  attribute var { text },
  attribute value { text }?
}

target-ssh =
  attribute type { "ssh" },
  (element user { text } &
  element host { text })

target-planetlab =
  attribute type { "planetlab" },
  (element slicename { text } &
  element apiurl { text } &
  element user { text })

target-local =
  attribute type { "local" }

target-group =
  attribute type { "group" },
  (target | reftarget)*

# only used to refer other targets by names in groups
reftarget = element target { attribute ref { text } }

tasklist-name = text

tasklist = element tasklist {
  attribute name { text },
  attribute on-error { ( "stop-experiment" | "stop-tasklist" | "stop-step" ) }?,
  attribute cleanup { tasklist-name }?,
  attribute timeout { xsd:duration }?,
  (seq | par)
}

call = element call {
  attribute tasklist { tasklist-name },
  attribute expected-status { "0" | "1" }?
}

task = call | seq | par | run | put | get | fail


fail = element fail { attribute status { text } }
seq = element seq { sublist_body }
par = element par { sublist_body }

put = element put { copy_body }
get = element get { copy_body }

sublist_body =
  attribute name { text }?,
  task*

timeout = attribute timeout { xsd:duration }

copy_body = 
  element source { text },
  element destination { text }

run = element run {
  attribute expected-status { xsd:integer }?,
  text
}

step = (
  element synchronize { empty } |
  element step {
    start_time?,
    stop_time?,
    attribute targets { text },
    attribute tasklist { text },
    attribute background { "true" | "false" }
  } |
  element repeat {
    attribute iterations { xsd:integer }?,
    attribute until { xsd:dateTime }?,
    attribute during { xsd:duration }?,
    step*
  } |
  element register-teardown {
    attribute tasklist { tasklist-name }
  }
)

start_time =
 attribute start_absolute { xsd:dateTime } |
 attribute start_relative { xsd:duration } 

stop_time =
 attribute stop_absolute { xsd:dateTime } |
 attribute stop_relative { xsd:duration } 
